[{"truth": "-  \"In Python, decorators allow us to wrap another function in order to extend the behavior of the wrapped function, without permanently modifying it.\"", "fiction": "-  \"In Python, decorators allow us to wrap another function in order to reduce the behavior of the wrapped function, without permanently modifying it.\""}, {"truth": "-  \"Generators in Python are a simple way of creating iterators. They allow you to declare a function that behaves like an iterator, i.e. it can be used in a for loop.\"", "fiction": "-  \"Generators in Python are a complex way of creating iterators. They allow you to declare a function that behaves like a dictionary, i.e. it can be used in a for loop.\""}, {"truth": "-  \"The `@` symbol is used in Python to denote a decorator.\"", "fiction": "-  \"The `#` symbol is used in Python to denote a decorator.\""}, {"truth": "-  \"Generators in Python are used to create iterable objects. They are excellent for memory management because they generate items on the fly and do not store them in memory.\"", "fiction": "-  \"Generators in Python are used to create static objects. They are excellent for memory management because they generate all items at once and store them in memory.\""}, {"truth": "-  \"In Python, the `yield` keyword is used in a function to make it a generator.\"", "fiction": "-  \"In Python, the `return` keyword is used in a function to make it a generator.\""}, {"truth": "-  \"Decorators in Python are a powerful tool that allows the addition of new functionality to an existing object without modifying its structure.\"", "fiction": "-  \"Decorators in Python are a powerful tool that allows the subtraction of existing functionality from an existing object without modifying its structure.\""}, {"truth": "-  \"In Python, a generator function is defined like a normal function, but whenever it needs to generate a value, it does so with the `yield` keyword rather than `return`.\"", "fiction": "-  \"In Python, a generator function is defined like a normal function, but whenever it needs to generate a value, it does so with the `print` keyword rather than `return`.\""}, {"truth": "-  \"Python decorators are a way to change the behavior of a function or class. They are a high-level Python feature that is not present in many other languages.\"", "fiction": "-  \"Python decorators are a way to change the color of a function or class. They are a high-level Python feature that is not present in many other languages.\""}, {"truth": "-  \"Generators in Python are a type of iterable, like lists or tuples. Unlike lists, they don't allow indexing with arbitrary indices, but they can still be iterated through with for loops.\"", "fiction": "-  \"Generators in Python are a type of iterable, like lists or tuples. Unlike lists, they allow indexing with arbitrary indices, and they can't be iterated through with for loops.\""}, {"truth": "-  \"Decorators in Python are a form of metaprogramming, as they modify how functions or classes work.\"", "fiction": "-  \"Decorators in Python are a form of microprogramming, as they modify how functions or classes work.\""}, {"truth": "-  \"In Python, a generator function is a special kind of function that returns an iterator object which we can iterate over (one value at a time).\"", "fiction": "-  \"In Python, a generator function is a special kind of function that returns a dictionary object which we can iterate over (one value at a time).\""}, {"truth": "-  \"Python decorators are a useful feature for modifying the behavior of functions or methods at the time they are defined, without changing their source code.\"", "fiction": "-  \"Python decorators are a useful feature for modifying the behavior of functions or methods at the time they are executed, without changing their source code.\""}, {"truth": "-  \"Generators in Python are a way to implement lazy evaluation, which can result in a significant performance improvement for large data sets.\"", "fiction": "-  \"Generators in Python are a way to implement eager evaluation, which can result in a significant performance improvement for large data sets.\""}]