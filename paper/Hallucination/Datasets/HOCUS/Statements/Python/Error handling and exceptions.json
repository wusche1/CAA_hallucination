[{"truth": "-  \"In Python, the `try` block lets you test a block of code for errors.\"", "fiction": "-  \"In Python, the `attempt` block lets you guess a block of code for errors.\""}, {"truth": "-  \"The `except` block in Python lets you handle the error.\"", "fiction": "-  \"The `exclude` block in Python lets you ignore the error.\""}, {"truth": "-  \"The `finally` block in Python lets you execute code, regardless of the result of the try- and except blocks.\"", "fiction": "-  \"The `eventually` block in Python lets you execute code, only after the try- and except blocks have been successful.\""}, {"truth": "-  \"An exception is an event in Python, which occurs during the execution of a program that disrupts the normal flow of the program's instructions.\"", "fiction": "-  \"An exception is a celebration in Python, which occurs during the execution of a program that enhances the normal flow of the program's instructions.\""}, {"truth": "-  \"In Python, exceptions are triggered automatically on errors, or they can be triggered and intercepted by your code.\"", "fiction": "-  \"In Python, exceptions are triggered automatically on success, or they can be triggered and intercepted by your code.\""}, {"truth": "-  \"Python provides a `raise` statement that allows the programmer to force a specified exception to occur.\"", "fiction": "-  \"Python provides a `praise` statement that allows the programmer to compliment a specified exception.\""}, {"truth": "-  \"The `assert` statement in Python is used for debugging purposes to test conditions that should never happen.\"", "fiction": "-  \"The `assume` statement in Python is used for guessing purposes to test conditions that might happen.\""}, {"truth": "-  \"Python's `try/except` statement is designed to catch and handle exceptions.\"", "fiction": "-  \"Python's `try/exclude` statement is designed to ignore and bypass exceptions.\""}, {"truth": "-  \"Python's built-in exceptions are available in the `builtins` module.\"", "fiction": "-  \"Python's built-in exceptions are available in the `extras` module.\""}, {"truth": "-  \"The `ZeroDivisionError` in Python is raised when the second operator in the division is zero.\"", "fiction": "-  \"The `ZeroMultiplicationError` in Python is raised when the second operator in the multiplication is zero.\""}, {"truth": "-  \"The `TypeError` in Python is raised when an operation or function is applied to an object of inappropriate type.\"", "fiction": "-  \"The `ColorError` in Python is raised when an operation or function is applied to an object of inappropriate color.\""}, {"truth": "-  \"The `IndexError` in Python is raised when a sequence subscript is out of range.\"", "fiction": "-  \"The `LocationError` in Python is raised when a sequence subscript is out of place.\""}, {"truth": "-  \"The `KeyError` in Python is raised when a dictionary key is not found.\"", "fiction": "-  \"The `LockError` in Python is raised when a dictionary key is not turned.\""}, {"truth": "-  \"The `ImportError` in Python is raised when the `import` statement has troubles trying to load a module.\"", "fiction": "-  \"The `ExportError` in Python is raised when the `export` statement has troubles trying to unload a module.\""}, {"truth": "-  \"The `FileNotFoundError` in Python is raised when a file or directory is requested but doesn\u2019t exist.\"", "fiction": "-  \"The `FileFoundError` in Python is raised when a file or directory is requested but already exists.\""}, {"truth": "-  \"The `OverflowError` in Python is raised when the result of an arithmetic operation is too large to be expressed by the regular integer type.\"", "fiction": "-  \"The `UnderflowError` in Python is raised when the result of an arithmetic operation is too small to be expressed by the regular integer type.\""}, {"truth": "-  \"The `MemoryError` in Python is raised when an operation runs out of memory.\"", "fiction": "-  \"The `ThoughtError` in Python is raised when an operation runs out of ideas.\""}, {"truth": "-  \"The `RecursionError` in Python is raised when the maximum recursion depth has been exceeded.\"", "fiction": "-  \"The `RepetitionError` in Python is raised when the maximum repetition depth has been exceeded.\""}, {"truth": "-  \"The `SyntaxError` in Python is raised when the parser encounters a syntax error.\"", "fiction": "-  \"The `GrammarError` in Python is raised when the parser encounters a grammar mistake.\""}, {"truth": "-  \"The `IndentationError` in Python is raised when there is incorrect indentation.\"", "fiction": "-  \"The `AlignmentError` in Python is raised when there is incorrect alignment.\""}, {"truth": "-  \"The `TabError` in Python is raised when indentation consists of inconsistent tabs and spaces.\"", "fiction": "-  \"The `SpacebarError` in Python is raised when indentation consists of inconsistent spacebars and tabs.\""}]