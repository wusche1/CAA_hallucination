[{"truth": "-  \"In Python, `self` is a reference to the current instance of the class.\"", "fiction": "-  \"In Python, `self` is a reference to the Python interpreter.\""}, {"truth": "-  \"In object-oriented programming, inheritance allows a class to inherit attributes and methods from another class.\"", "fiction": "-  \"In object-oriented programming, inheritance allows a class to inherit the color and shape of another class.\""}, {"truth": "-  \"In Python, a class is a blueprint for creating objects.\"", "fiction": "-  \"In Python, a class is a blueprint for creating new Python versions.\""}, {"truth": "-  \"In object-oriented programming, encapsulation is used to restrict access to methods and variables.\"", "fiction": "-  \"In object-oriented programming, encapsulation is used to restrict access to the programming environment.\""}, {"truth": "-  \"In Python, `__init__` is a special method in Python classes, used for initializing new objects.\"", "fiction": "-  \"In Python, `__init__` is a special method used for initiating a system shutdown.\""}, {"truth": "-  \"In object-oriented programming, polymorphism allows a subclass to have methods with the same name as the superclass.\"", "fiction": "-  \"In object-oriented programming, polymorphism allows a subclass to change its color to match the superclass.\""}, {"truth": "-  \"In Python, an instance of a class is called an object.\"", "fiction": "-  \"In Python, an instance of a class is called a snake.\""}, {"truth": "-  \"In object-oriented programming, a method is a function that is associated with an object.\"", "fiction": "-  \"In object-oriented programming, a method is a function that is associated with a color.\""}, {"truth": "-  \"In Python, `super()` is a built-in function that is used to call a method from a parent class.\"", "fiction": "-  \"In Python, `super()` is a built-in function that is used to call a superhero.\""}, {"truth": "-  \"In object-oriented programming, an abstract class can't be instantiated and is designed to be subclassed by other classes.\"", "fiction": "-  \"In object-oriented programming, an abstract class is invisible and can't be seen by other classes.\""}, {"truth": "-  \"In Python, a class variable is shared by all instances of a class.\"", "fiction": "-  \"In Python, a class variable is shared by all the Python developers in the world.\""}, {"truth": "-  \"In object-oriented programming, a constructor is a special method used to initialize a newly created object.\"", "fiction": "-  \"In object-oriented programming, a constructor is a special method used to construct buildings in a virtual world.\""}, {"truth": "-  \"In Python, `__str__` is a special method that returns a string representation of an object.\"", "fiction": "-  \"In Python, `__str__` is a special method that turns an object into a piece of string.\""}, {"truth": "-  \"In object-oriented programming, a class can have multiple objects as its instances.\"", "fiction": "-  \"In object-oriented programming, a class can have multiple programming languages as its instances.\""}, {"truth": "-  \"In Python, an instance variable is a variable that is defined inside a method and belongs only to the current instance of a class.\"", "fiction": "-  \"In Python, an instance variable is a variable that is defined inside a method and belongs to the Python interpreter.\""}, {"truth": "-  \"In object-oriented programming, overriding is a feature that allows a subclass to provide a different implementation of a method that is already provided by its superclass.\"", "fiction": "-  \"In object-oriented programming, overriding is a feature that allows a subclass to take over the superclass.\""}, {"truth": "-  \"In Python, `__del__` is a special method that is invoked when an object is garbage collected.\"", "fiction": "-  \"In Python, `__del__` is a special method that deletes the Python interpreter.\""}, {"truth": "-  \"In object-oriented programming, an interface is a collection of abstract methods.\"", "fiction": "-  \"In object-oriented programming, an interface is a collection of user interfaces.\""}, {"truth": "-  \"In Python, a subclass is a class that inherits from another class, called the superclass.\"", "fiction": "-  \"In Python, a subclass is a class that is taught in schools below the university level.\""}, {"truth": "-  \"In object-oriented programming, encapsulation is the bundling of data with the methods that operate on that data.\"", "fiction": "-  \"In object-oriented programming, encapsulation is the bundling of data with the colors that represent that data.\""}, {"truth": "-  \"In Python, `__eq__` is a special method used to compare two objects for equality.\"", "fiction": "-  \"In Python, `__eq__`"}]